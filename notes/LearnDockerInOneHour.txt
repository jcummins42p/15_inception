# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    LearnDockerInOneHour.txt                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: jcummins <jcummins@student.42prague.com>   +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/11/01 13:34:00 by jcummins          #+#    #+#              #
#    Updated: 2024/11/01 14:04:53 by jcummins         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

Docker is a lunchbox with everything you need to eat...

It ensures consistency, portability and ensures that the code runs as expected in any environment. Docker generates a self contained box which contains its own operating system, acting like a separate computer.

Why use docker? Makes apps faster in both development and deployment.

1. consistency across environments. Ensures the app runs the same on every computer, and everyone uses the same commands to run the app. Developers usually have to deal with different ooperating systems but docker streamlines this

2. Isolation: docker maintains a clear line between our app dependancies and the host OS, so no more clashes between dependency versions.

3. Portability: Docker lets us easily move our apps between stages - development to testing, testing to production.

4. Efficiency: They are lighter and share the host system resources, making them more efficient than any traditional Virtual Machine.

5. Version Control: Docker also has a built in version control system like git.

6. Scalability: handle more users by creating more copies of the application when needed.

7. DevOps integration: bridges the gap between development and operations, sreamlining the workflow from coding to deployment.

How does it work?

1. Images
	- Lightweight standalone package containing everything needed to run a piece of software
	- Code, runtimes (like node.js), operating system
	- A recipe for the application (instructions)
	- Also the ingredients

2. Containers
	- A runnable instance of a docker image
	- Execution environment
	- Takes everything specified in the image and executes
	- The finished meal created from the recipe
	- You can have multiple containers running from a single image

3. Volumes
	- A persistent data storage mechanism
	- Allows data to be shared between the docker container and the host machine
	- Or between multiple containers.
	- Ensures data durability and persistence, even if the container is stopped or removed

4. Network
	- A Channel that allows containers to communicate between themselves and the outside world
	- Even though each container has their own focus, the network allows them to collaborate efficiently

Docker workflow: Docker Client, Docker Host (daemon), Docker Registry (hub)
	- Docker Client (command centre)
		- issue commands to docker client through cli or gui
		- build, run or manage images or containers
		- the chef
	- Docker Host or Daemon (executor)
		- background process responsible for managing containers on the host system
		- listens for commands
		- handles tasks
		- master chef
	-Docker Registry or Hub
		- centralised repo of images, public and private
		- the github to docker's git
		- cookbook or recipe library

How to create a docker image? Starts from a special file called a dockerfile (obviously). It's a set of instructions:

command	-	FROM image[:tag] [AS name]
example -	FROM ubuntu:20.04

command -	WORKDIR /path/to/workdir
example -	WORKDIR /app

command -	COPY [--chown=,user>:<group>] <src>... <dest>
example -	COPY . /app

command -	RUN <command>			// just executes commands in the shell
example -	RUN npm run dev

command -	EXPOSE <porot> [<port>/<protocol>...]	// informs docker that the container will listen on the specified ports
example -	EXPOSE 3000

command -	ENV KEY=VALUE			// sets environment variables during hte build process
example -	ENV NODE_ENV=production

command -	VOLUME ["/data"]		// creates a mount point for externally mounted volumes, specifies internal location to connect external storage
example -	VOLUME /myvol

command
command -	CMD ["npm", "run", "dev"]	// provides default command to execute when container starts
example -	CMD npm run dev

entrypoint
command -	CMD		// cmd can be overridden, ENTRYPOINT can not be changed easily.
example -
