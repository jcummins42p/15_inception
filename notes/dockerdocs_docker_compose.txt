# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    dockerdocs_docker_compose.txt                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: jcummins <jcummins@student.42prague.com>   +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/11/01 17:15:51 by jcummins          #+#    #+#              #
#    Updated: 2024/11/01 17:41:36 by jcummins         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

Compose simplifies the control of your entire application stack, making it easy to manage services, networks, and volumes in a single, comprehensible YAML configuration file.

YAML is 'yet another markup language'. This is the basic layout:

services:
	web:
		build:
		ports:
			- "8000:5000"
	redis:
		image: "redis:alpine"

This compose file defines two services: web and redis.

The web service uses an image that's built from the Dockerfile in the current directory. It then binds the container and the host machine to the exposed port, 8000. this example service uses the default port for the Flask web server, 5000.

The redis service uses a public Redis image pulled from the Docker Hub registry. We cannot use image: in the inception project because all our Dockerfiles must be written / configured and not downloaded during the process from dockerhub.

HOW COMPOSE WORKS

With Docker Comopose you use a YAML configuration file, known as the compose file, to configure your application's services, and then you create and start all the services from your configuration with the compose CLI.

The compose file, or compose.yaml file, follows the rules provided by the compose specification in how to define multi-container applications. This is the Docker Compose implementation of hte formal compose specification.

Computing components of an application are defined as services. A service is an abstract concept implemented on platforms by running the same container image, and configuration, one or more times.
Services communicate with each other through networks. In the Compose Specification, a network is a platform capability abstraction to establish an IP route between containers within services connected together.
Services store and share persistent data into volumes. The Specification describes suca persistent data as a high--level filesystem mount with global options.
Some services require configuration data that is dependent on the runtime or platform. For this, the Specification defines a dedicated configs concept. From a service container point of view, configss are comparable to volumers, in that they are files mounted into the container. But the actual definition involves distinct platform resources and services, which are abstracted by this type.
A Secret is a specific flavour of configuration data for sensitive data that should not be exposed without security considerations. Secrets are made available to services as files mounted into hteir containers, but the platform-specific resources to provide sensitive data are specific enough to deserve a distinct concept and definition within the Compose specification.
A project is an individual deplyment of an application specification on a platform. A project's name, set with the top-level name attribute, is used to group resources together and isolate them from other applications or other installation of the same Compose-specified application with distinct parameters. If you are creating resources on a platform, you must prefix resource names by project and set the label com.docker.compose.project
Compose offers a way fr you sto set a custom project name and override this name, so that the same compose.yaml file can be deployed twice on the same infrastructure, without changes, by just passing a distinct name.

THE COMPOSE FILE
The default path for a Compose file is compose.yaml (preferred) or compose.yml that is placed in the working directory. Compose also supports docker-compose.yaml and docker-compose.yml for backwards compatibility of earlier versions. If both files exist, Compose prefers the canonical compose.yaml

You can use fragments and extensions to keep your comopose file efficient and easy to maintain.

Multiple Compose files can be merged together to define the application model. the combination of YAML files is implemented by appending or overriding YAML elements based on the Compose file order you set. Simple attributes and maps get overridden by the highest order compose file, lists get merged by appending. Relative paths are resolved based on the first compose file's parent folder, whenever complimentary files being merged are hosted in other folders. As some Compose file elements can both be expressed as single strings or complex objects, merges apply to the expanded form.

If you want to reuse other Compose files, or factor out parts of our application model into separate compose files, you can also use include. This is useful if your Compose application is dependent on another application which is managed by a different team, or needs to be shared with others.

CLI

The Docker CLI lets you interact with your Docker compose applications through the docker compose command, and its subcommands. Using the CLI, tyou can manage the lifecycle of your multi-container applications defined in the compose.yaml file. The CLI commands enable you to start, stop, and configure your applications effortlessly.

Key Commands

To start all the services defined in your compose.yaml file:
	docker compose up

To stop and remove the running services:
	docker compose down

If you want to monitor the output of your tunning containers and debug issues, you can view the logs with:
	docker compose logs

To list all the services along with their current status:
	docker compose ps


