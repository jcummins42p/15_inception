# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    notes_01.txt                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: jcummins <jcummins@student.42prague.com>   +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/10/30 17:10:07 by jcummins          #+#    #+#              #
#    Updated: 2024/10/30 18:33:06 by jcummins         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

Notes from Xda-develpers essential docker commands

Docker is a popular tool for pulling, deploting and managing containerized applications. It is compatible with multiple OSes, is fairly lightweight and lets you access a massive number of community created images.

1 Docker pull image_name
//	grabs an image from the docker hub. By default this downloads the version of the image with the latest tag, but you can use the colon followed by a different tag in case you want to use another variant of the image.

2 docker images
//	Executing images without additional keywords will let you see the details of all the images in you Docker environment. It's pretty useful when you need to check the ID and tags of your images.

3 docker build
//	You can execute the docker build command to create a Dockerfile from the image. you can think of it as an editable document containing the details of your container.

4 docker run
//	Once you've downloaded an image or created a Dockerfile, you can use it with the run command to deploy a container. The docker run command also has a couple of useful flags that let you modify certain aspects of teh container without modifying the config file. For instance the --name flag lets you add a name to the container, while invoking the -p flag allows you to assign the ports to your container.

5 docker exec
//	Upon running the exec keyword, you can enter commands inside the container, just like you would on a typical virtual machine. Using exec with the -it container_name sh keywords lets you access the shee interface of the container.

6 docker stop
//	As you may have guessed from the name, the stop command can halt a container, and you won't be able to access its web UI until you start it again.

7 docker start
//	When you need to deploy a container after stoppign it or rebooting you system, you'll want to enter the start command. If you've created a checkpoint for the container, you can add the --checkpoint flag to restore it to its saved state.

8 docker compose up
//	Fans of self-hosted services may have come across docker-compose.yml/files inside the GitHub repositories of popular projects. While there are some differences between the two, these yaml files act comewhat similar to Dockerfile documents, and you can use them to run an application as a container with the help of the docker compose up command.
//	note: If youre using the Docker Compose standalone plugin, you'll have to add a hyphen - symbol between docker and compose.

9 docker inspect
//	the inspect keyword lets you check it ID, host-path, and other config-esque details of a container in the same format as your typical JSON array.

10 docker logs
//	entering the docker logs command displays a logbook with the container operational metrics. You can invoke the --details option to get even more details about the container's operations.

11 docker cp /path_to_file/file_name container_name:/folder_name
//	The docker cp command lets you copy some files from you PC and paste them at a specific location inside your container. Just make sure you set the correct path for the file when attempting the copy operation.

12 docker stats
//	Should you run the docker stats command, the terminal will display the resource consumption of all containers in real time. I you want to track a single container, you can add its name after the stats keyword

13 docker info
//	Meanwhile,docker info shows the statistics of the system that's running the Docker services. It's useful when you wnat to check the location of certain container directories.

14 docker ps
//	You can execute the docker ps command to check the operational status, occupied ports, and time of creation of all containers. Unlike the docker stats command, ps only displays the current values instead of running a live resource tracker for your containers.

15 docker port container_name
//	Once you start running multiple containers, ti's easy to get your ports mixed up. The port keyword lets you check all the ports occupied by a specific container.

16 docker rmi image_name
//	Let's say you wnat to get rid of an image you downloaded from the Docker Hub or other registries. To do so, simply enter the rmi keyword followed by the name of the image.

17 docker rm container_name
//	The docker rm command is the equivalent of the rmi keyword for containers, except, the container has to be in an offline (stopped) state before you can get rid of it.

18 docker system prune -a
// Often used with the -a flag, executing this command will get rid of all the unused Docker images and conatiners iin your system.

19 docker search
// You can run the search keyword to browse the official Docker Hub for a specific image. It's quite useful in CLI-only distros where you want to search for Docker images without the aid of a browser.

20 docker image history image_name
// The history keyword allows you to browse the changelog of an image, regardless of whether it's a community image or something you created.

21 docker commit container_name new_image_name
//	Once you start customizing your containers, you can enter the docker commit command to save the current configuration of a container as an image.

22 docker login -u username -p user_password
//	The login keyword lets you sign in to your Docker account using a web UI, though you can add the -u username and -p user_password strings to log into your account from the CLI. In case you want to sign in to a different registry, you'll want to add the name of the registry after login.

23 docker push image_name
//	If you wish to publish your customized image on the Docker Hub, you can run the docker push command followed by your account's username and the name of the image. It's worth noting htat you can only execute this command after signing in your Docker credentials.

24 docker network create network_name
//	similar to your favorite hypervisor platform, Docker also lets you create custom (virtual) networkks for your containers. You can do so by entering the network keyword with the create argument followed by the name of your network.

25 docker network connect network_name container_name
//	the next logical step is to use the docker connect command to pair your containers with the network you created earlier. It's quite convenient when you want two containers to communicate over an isolated network.
